package dev.tenacity.module.impl.exploit;

import dev.tenacity.Tenacity;
import dev.tenacity.event.impl.game.WorldEvent;
import dev.tenacity.event.impl.network.PacketReceiveEvent;
import dev.tenacity.event.impl.network.PacketSendEvent;
import dev.tenacity.event.impl.player.MotionEvent;
import dev.tenacity.event.impl.player.UpdateEvent;
import dev.tenacity.module.Category;
import dev.tenacity.module.Module;
import dev.tenacity.module.impl.movement.Flight;
import dev.tenacity.module.settings.impl.BooleanSetting;
import dev.tenacity.module.settings.impl.ModeSetting;
import dev.tenacity.module.settings.impl.MultipleBoolSetting;
import dev.tenacity.module.settings.impl.NumberSetting;
import dev.tenacity.utils.misc.Random;
import dev.tenacity.utils.player.ChatUtil;
import dev.tenacity.utils.player.MovementUtils;
import dev.tenacity.utils.server.PacketUtils;
import dev.tenacity.utils.time.TimerUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPosition;
import net.minecraft.util.EnumFacing;
import org.apache.commons.lang3.RandomUtils;

import java.util.LinkedList;

public final class Disabler extends Module {

    private final MultipleBoolSetting modes = new MultipleBoolSetting(
            "Disablers",
            new BooleanSetting("Ping Spoof", false),
            new BooleanSetting("Vulcan", false),
            new BooleanSetting("NoRules", false),
            new BooleanSetting("Polar", false),
            new BooleanSetting("Watchdog", false),
            new BooleanSetting("Universo", false),
            new BooleanSetting("Sprint", false),
            new BooleanSetting("MMCTest", false),
            new BooleanSetting("Experimental", false),
            new BooleanSetting("Sentinel", false)
    );

    private final NumberSetting pingMinDelay = new NumberSetting("Ping Min Delay", 0, 10000, 0, 1);
    private final NumberSetting pingMaxDelay = new NumberSetting("Ping Max Delay", 0, 10000, 0, 1);
    private final NumberSetting pingWorldDelay = new NumberSetting("Ping World Delay", 15000, 30000, 0, 1);

    private final ModeSetting pingStartMode = new ModeSetting("Ping Start Mode", "First", "All", "First");
    private final ModeSetting pingSendMode = new ModeSetting("Ping Send Mode", "All", "All", "First");

    private final BooleanSetting debug = new BooleanSetting("Debug", true);

    private LinkedList < Packet < INetHandlerPlayServer >> queueBus = new LinkedList < > ();

    private boolean startDisaballer = false;

    private TimerUtil timerUtil = new TimerUtil();
    private boolean disabling;
    public int gayamount;

    private boolean wasinablock = false;

    // Ping Spoof Variables
    private boolean pingShouldActive = false;
    private int pingSendDelay;

    private float lobbyX, lobbyY, lobbyZ;


    public Disabler() {
        super("Disabler", Category.EXPLOIT, "Disables some anticheats");

        this.addSettings(
                modes,

                pingMinDelay,
                pingMaxDelay,
                pingWorldDelay,

                pingStartMode,
                pingSendMode,

                debug
        );
    }

    @Override
    public void onEnable() {
        gayamount = 0;
        lobbyY = (float) mc.thePlayer.posY;
        lobbyX = (float) mc.thePlayer.posX;
        lobbyZ = (float) mc.thePlayer.posZ;

        wasinablock = false;
        if (modes.isEnabled("NoRules")) {
            mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY - 1, mc.thePlayer.posZ);

        }
        if (modes.isEnabled("Ping Spoof"))
            queueBus.forEach(packet -> PacketUtils.sendPacket(packet, true));

        queueBus.clear();

        pingShouldActive = false;

        super.onEnable();
    }

    @Override
    public void onDisable() {
        gayamount = 0;
        wasinablock = false;
        super.onDisable();
    }

    @Override
    public void onWorldEvent(WorldEvent event) {

        pingShouldActive = false;

        super.onWorldEvent(event);
    }

    @Override
    public void onPacketReceiveEvent(PacketReceiveEvent event) {
        Packet < ? > packet = event.getPacket();

        for (BooleanSetting setting: modes.getBoolSettings()) {
            if (setting.isEnabled()) { // nigger
                switch (setting.getName()) {
                    case "Ping Spoof":
                        if (packet instanceof C0FPacketConfirmTransaction) {
                            C0FPacketConfirmTransaction c0f = (C0FPacketConfirmTransaction) packet;

                            if (!isInventory(c0f.getUid())) {
                                queueBus.add(c0f);
                                event.cancel();

                                debug(
                                        String.format( // nigger #2
                                                "C0F added. Action ID: %s. Target ID: %s",
                                                c0f.getUid(), c0f.getWindowId()
                                        )
                                );
                            }
                        }

                        if (packet instanceof C00PacketKeepAlive) {
                            C00PacketKeepAlive c00 = (C00PacketKeepAlive) packet;

                            queueBus.add(c00);
                            event.cancel();

                            debug(
                                    String.format(
                                            "C00 Added. Key: %s.",
                                            c00.getKey()
                                    )
                            );
                        }
                        break;

                    case "NoRules":
                        if (wasinablock) {
                            mc.thePlayer.motionY = 1;
                        }

                        if (mc.thePlayer.isCollidedVertically()) {
                            if (event.getPacket() instanceof S08PacketPlayerPosLook) {
                                wasinablock = true;
                                event.cancel();
                            }
                        }
                        break;


                    case "MMCTest":
                        // if(mc.thePlayer.ticksExisted % 2 == 0) {
                        //   if(event.getPacket() instanceof S08PacketPlayerPosLook) {
                        // event.cancel();
                        //  ChatUtil.print("lol");
                        //mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook());


                        //  }
                        //   }


                        break;


                }
            }
        }

        super.onPacketReceiveEvent(event);
    }


    @Override
    public void onPacketSendEvent(PacketSendEvent event) {
        Packet < ? > packet = event.getPacket();

        for (BooleanSetting setting: modes.getBoolSettings()) {
            if (setting.isEnabled()) {
                switch (setting.getName()) {

                    case "MMCTest":
                        // if (packet instanceof C0BPacketEntityAction || packet instanceof C0APacketAnimation) {
                        //  event.cancel();
                        //ChatUtil.print("Liticaner nigga");
                        //   }
                        if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                            event.cancel();
                            //ChatUtil.print("Cancel");
                        }
                        if (event.getPacket() instanceof C00PacketKeepAlive) {
                            if (mc.thePlayer.ticksExisted % 2 == 0) {
                                ChatUtil.print("Spoof");
                            }
                        }
                        if (packet instanceof S07PacketRespawn) {
                            event.cancel();
                        }




                        break;
                    case"Experimental":
                        if (event.getPacket() instanceof C0FPacketConfirmTransaction) {

                            event.cancel();
                        } else if (event.getPacket() instanceof C0BPacketEntityAction) {
                            final C0BPacketEntityAction packetEntityAction = (C0BPacketEntityAction) event.getPacket();
                            if (packetEntityAction.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING) || packetEntityAction.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING)) {
                                event.cancel();
                            }
                        }

                        break;
                    case "Ping Spoof":
                        if (packet instanceof C0FPacketConfirmTransaction) {
                            C0FPacketConfirmTransaction c0f = (C0FPacketConfirmTransaction) packet;

                            if (!isInventory(c0f.getUid())) {
                                queueBus.add(c0f);
                                event.cancel();

                                debug(
                                        String.format(
                                                "C0F added. Action ID: %s. Target ID: %s",
                                                c0f.getUid(), c0f.getWindowId()
                                        )
                                );
                            }
                        }

                        if (packet instanceof C00PacketKeepAlive) {
                            C00PacketKeepAlive c00 = (C00PacketKeepAlive) packet;

                            queueBus.add(c00);
                            event.cancel();

                            debug(
                                    String.format(
                                            "C00 Added. Key: %s.",
                                            c00.getKey()
                                    )
                            );
                        }
                        break;

                    case "Universo":
                        if (packet instanceof C0BPacketEntityAction) {
                            final C0BPacketEntityAction wrapper = (C0BPacketEntityAction) packet;

                            if (wrapper.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                                event.cancel();
                            }
                        }
                        if (packet instanceof S07PacketRespawn) {
                            disabling = true;
                        } else if (packet instanceof C02PacketUseEntity) {
                            disabling = false;
                        } else if (packet instanceof C03PacketPlayer && mc.thePlayer.ticksExisted <= 10) {
                            disabling = true;
                        } else if (packet instanceof C0FPacketConfirmTransaction && disabling && mc.thePlayer.ticksExisted < 350) {
                            ((C0FPacketConfirmTransaction) event.getPacket()).setUid(
                                    mc.thePlayer.ticksExisted % 2 == 0 ? Short.MIN_VALUE : Short.MAX_VALUE);
                        }



                        break;
                    case "Sprint":
                        final Packet < ? > p = event.getPacket();

                        if (p instanceof C0BPacketEntityAction) {
                            final C0BPacketEntityAction wrapper = (C0BPacketEntityAction) p;

                            if (wrapper.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                                if (mc.thePlayer.serverSprintState) {
                                    mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                                    mc.thePlayer.serverSprintState = false;
                                }

                                event.cancel();
                            }

                            if (wrapper.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING)) {
                                event.cancel();
                            }
                        }

                        break;

                    case "Sentinel":
                        if (event.getPacket() instanceof C0BPacketEntityAction) {
                            event.cancel();
                        }
                        break;


                    case "Watchdog":
                        break;


                    case "Vulcan":


                        if (event.getPacket() instanceof C0BPacketEntityAction) {
                            if (mc.thePlayer.ticksExisted % 10 == 0) {
                                gayamount++;
                                ChatUtil.print("Gay " + gayamount);
                            }
                            event.cancel();
                        }
                        break;
                }
            }
        }
    }

    @Override
    public void onUpdateEvent(UpdateEvent event) {
        for (BooleanSetting setting: modes.getBoolSettings()) {
            if (setting.isEnabled()) {
                switch (setting.getName()) {
                    case "Ping Spoof":
                        if (
                                timerUtil.hasTimeElapsed(pingWorldDelay.getValue().longValue()) &&
                                        !pingShouldActive
                        ) {
                            pingShouldActive = true;

                            pingSendDelay = Random.nextInt(
                                    pingMinDelay.getValue().intValue(),
                                    pingMaxDelay.getValue().intValue()
                            );

                            if (queueBus.size() > 0)
                                flush(false);

                            timerUtil.reset();

                            debug(String.format("Activated. Expected next delay: %s ms", pingSendDelay));
                        }

                        if (pingShouldActive) {
                            if (timerUtil.hasTimeElapsed(pingSendDelay) && !queueBus.isEmpty()) {
                                flush(true);

                                pingSendDelay = RandomUtils.nextInt(
                                        pingMinDelay.getValue().intValue(),
                                        pingMaxDelay.getValue().intValue()
                                );

                                timerUtil.reset();

                                debug(String.format("Expected next delay: %s ms", pingSendDelay));
                            }
                        }
                        break;
                }
            }
        }

        super.onUpdateEvent(event);
    }

    @Override
    public void onMotionEvent(MotionEvent event) {
        for (BooleanSetting setting: modes.getBoolSettings()) {
            if (setting.isEnabled()) {
                switch (setting.getName()) {
                    case "Sentinel":
                        mc.thePlayer.sendQueue.addToSendQueue(new C0FPacketConfirmTransaction());
                        mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction());

                        if (Tenacity.INSTANCE.getModuleCollection().getModule(Flight.class).isEnabled()) {
                            event.setOnGround(true);
                        }

                        break;

                    case "Polar":
                        event.setOnGround(true);
                        break;

                    case "Vulcan":
                        if (mc.thePlayer.ticksExisted % 5 == 0 && MovementUtils.isMoving()) {
                            mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, new BlockPosition(mc.thePlayer), EnumFacing.UP));

                        }

                        break;
                }
            }
        }
    }

    private void debug(String string, boolean force) {
        if (debug.isEnabled() || force)
            ChatUtil.print(string);
    }

    private void debug(String string) {
        if (debug.isEnabled())
            ChatUtil.print(string);
    }

    private boolean isInventory(short action) {
        return action > 0 && action < 100;
    }

    private void flush(boolean check) {
        ModeSetting setting = (check) ? pingSendMode : pingStartMode;

        if (setting.is("All")) {
            while (queueBus.size() > 0) {
                PacketUtils.sendPacket(queueBus.poll(), true);
            }
        } else {
            PacketUtils.sendPacket(queueBus.poll());
        }
    }

}