package dev.tenacity.module.impl.exploit;

import dev.tenacity.Tenacity;
import dev.tenacity.event.impl.game.WorldEvent;
import dev.tenacity.event.impl.network.PacketReceiveEvent;
import dev.tenacity.event.impl.player.UpdateEvent;
import dev.tenacity.module.impl.movement.Flight;
import dev.tenacity.event.impl.network.PacketSendEvent;
import dev.tenacity.event.impl.player.MotionEvent;
import dev.tenacity.module.Category;
import dev.tenacity.module.Module;
import dev.tenacity.module.settings.impl.BooleanSetting;
import dev.tenacity.module.settings.impl.ModeSetting;
import dev.tenacity.module.settings.impl.MultipleBoolSetting;
import dev.tenacity.module.settings.impl.NumberSetting;
import dev.tenacity.utils.misc.Random;
import dev.tenacity.utils.player.ChatUtil;
import dev.tenacity.utils.server.PacketUtils;
import dev.tenacity.utils.time.TimerUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.*;
import org.apache.commons.lang3.RandomUtils;

import java.util.LinkedList;

public final class Disabler extends Module {

    private final MultipleBoolSetting modes = new MultipleBoolSetting(
            "Disablers",
            new BooleanSetting("Ping Spoof", false),
            new BooleanSetting("Sentinel", false)
    );

    private final NumberSetting pingMinDelay = new NumberSetting("Ping Min Delay", 0, 10000, 0, 1);
    private final NumberSetting pingMaxDelay = new NumberSetting("Ping Max Delay", 0, 10000, 0, 1);
    private final NumberSetting pingWorldDelay = new NumberSetting("Ping World Delay", 15000, 30000, 0, 1);

    private final ModeSetting pingStartMode = new ModeSetting("Ping Start Mode", "First", "All", "First");
    private final ModeSetting pingSendMode = new ModeSetting("Ping Send Mode", "All", "All", "First");

    private final BooleanSetting debug = new BooleanSetting("Debug", true);

    private LinkedList<Packet<INetHandlerPlayServer>> queueBus = new LinkedList<>();

    private TimerUtil timerUtil = new TimerUtil();

    // Ping Spoof Variables
    private boolean pingShouldActive = false;
    private int pingSendDelay;

    public Disabler() {
        super("Disabler", Category.EXPLOIT, "Disables some anticheats");

        this.addSettings(
                modes,

                pingMinDelay,
                pingMaxDelay,
                pingWorldDelay,

                pingStartMode,
                pingSendMode,

                debug
        );
    }

    @Override
    public void onEnable() {

        if (modes.isEnabled("Ping Spoof"))
            queueBus.forEach(packet -> PacketUtils.sendPacket(packet, true));

        queueBus.clear();

        pingShouldActive = false;

        super.onEnable();
    }

    @Override
    public void onDisable() {
        super.onDisable();
    }

    @Override
    public void onWorldEvent(WorldEvent event) {

        pingShouldActive = false;

        super.onWorldEvent(event);
    }

    @Override
    public void onPacketReceiveEvent(PacketReceiveEvent event) {
        Packet <?> packet = event.getPacket();

        for (BooleanSetting setting : modes.getBoolSettings()) {
            if (!setting.isEnabled())
                continue;

            switch (setting.getName()) {
                case "Ping Spoof":
                    if (packet instanceof C0FPacketConfirmTransaction) {
                        C0FPacketConfirmTransaction c0f = (C0FPacketConfirmTransaction) packet;

                        if (!isInventory(c0f.getUid())) {
                            queueBus.add(c0f);
                            event.cancel();

                            debug(
                                    String.format(
                                            "C0F added. Action ID: %s. Target ID: %s",
                                            c0f.getUid(), c0f.getWindowId()
                                    )
                            );
                        }
                    }

                    if (packet instanceof C00PacketKeepAlive) {
                        C00PacketKeepAlive c00 = (C00PacketKeepAlive) packet;

                        queueBus.add(c00);
                        event.cancel();

                        debug(
                                String.format(
                                        "C00 Added. Key: %s.",
                                        c00.getKey()
                                )
                        );
                    }
                    break;

                case "Sentinel":
                    if (event.getPacket() instanceof  C0BPacketEntityAction) {
                        event.cancel();
                    }
                    break;
            }
        }

        super.onPacketReceiveEvent(event);
    }

    @Override
    public void onPacketSendEvent(PacketSendEvent event) {
        Packet <?> packet = event.getPacket();

        for (BooleanSetting setting : modes.getBoolSettings()) {
            if (!setting.isEnabled())
                continue;

            switch (setting.getName()) {
                case "Ping Spoof":
                    if (packet instanceof C0FPacketConfirmTransaction) {
                        C0FPacketConfirmTransaction c0f = (C0FPacketConfirmTransaction) packet;

                        if (!isInventory(c0f.getUid())) {
                            queueBus.add(c0f);
                            event.cancel();

                            debug(
                                    String.format(
                                            "C0F added. Action ID: %s. Target ID: %s",
                                            c0f.getUid(), c0f.getWindowId()
                                    )
                            );
                        }
                    }

                    if (packet instanceof C00PacketKeepAlive) {
                        C00PacketKeepAlive c00 = (C00PacketKeepAlive) packet;

                        queueBus.add(c00);
                        event.cancel();

                        debug(
                                String.format(
                                        "C00 Added. Key: %s.",
                                        c00.getKey()
                                )
                        );
                    }
                    break;

                case "Sentinel":
                    if (event.getPacket() instanceof  C0BPacketEntityAction) {
                        event.cancel();
                    }
                    break;
            }
        }
    }

    @Override
    public void onUpdateEvent(UpdateEvent event) {
        for (BooleanSetting setting : modes.getBoolSettings()) {
            if (!setting.isEnabled())
                continue;

            switch (setting.getName()) {
                case "Ping Spoof":
                    if (
                            timerUtil.hasTimeElapsed(pingWorldDelay.getValue().longValue()) &&
                            !pingShouldActive
                    ) {
                        pingShouldActive = true;

                        pingSendDelay = Random.nextInt(
                                pingMinDelay.getValue().intValue(),
                                pingMaxDelay.getValue().intValue()
                        );

                        if (queueBus.size() > 0)
                            flush(false);

                        timerUtil.reset();

                        debug(String.format("Activated. Expected next delay: %s ms", pingSendDelay));
                    }

                    if (pingShouldActive) {
                        if (timerUtil.hasTimeElapsed(pingSendDelay) && !queueBus.isEmpty()) {
                            flush(true);

                            pingSendDelay = RandomUtils.nextInt(
                                    pingMinDelay.getValue().intValue(),
                                    pingMaxDelay.getValue().intValue()
                            );

                            timerUtil.reset();

                            debug(String.format("Expected next delay: %s ms", pingSendDelay));
                        }
                    }
            }
        }

        super.onUpdateEvent(event);
    }

    @Override
    public void onMotionEvent(MotionEvent event) {

        for (BooleanSetting setting : modes.getBoolSettings()) {
            if (!setting.isEnabled())
                continue;

            switch (setting.getName()) {
                case "Sentinel":
                    if (Tenacity.INSTANCE.getModuleCollection().getModule(Flight.class).isEnabled()) {
                        boolean playerNearby = mc.currentScreen != null;

                        if (mc.thePlayer.getDistance(mc.thePlayer.lastReportedPosX, mc.thePlayer.lastReportedPosY, mc.thePlayer.lastReportedPosZ) <= (playerNearby ? 5 : 10) - Flight.horizontalSpeed.getValue() - 0.15 && mc.thePlayer.swingProgressInt != 3) {
                            event.cancel();
                        }
                    }

                    break;
            }
        }
    }

    private void debug(String string, boolean force) {
        if (debug.isEnabled() || force)
            ChatUtil.print(string);
    }

    private void debug(String string) {
        if (debug.isEnabled())
            ChatUtil.print(string);
    }

    private boolean isInventory(short action) {
        return action > 0 && action < 100;
    }

    private void flush(boolean check) {
        ModeSetting setting = (check) ? pingSendMode : pingStartMode;

        if (setting.is("All")) {
            while (queueBus.size() > 0) {
                PacketUtils.sendPacket(queueBus.poll(), true);
            }
        } else {
            PacketUtils.sendPacket(queueBus.poll());
        }
    }

}

